import{C as g}from"./index-CWZxJKc-.js";let i=null;async function D(r=g.IDB_NAME,s=g.IDB_VERSION,a={}){return new Promise((n,c)=>{console.log(`[IDB] 🗄️ Opening database: ${r} v${s}`);const e=indexedDB.open(r,s);e.onerror=()=>{console.error("[IDB] ❌ Failed to open database:",e.error),c(e.error)},e.onsuccess=()=>{console.log("[IDB] ✅ Database opened successfully");const o=e.result;o.onversionchange=()=>{console.log("[IDB] 🔄 Database version changed, closing..."),o.close(),window.location.reload()},n(o)},e.onupgradeneeded=o=>{console.log("[IDB] 🔧 Database upgrade needed");const t=o.target.result;if(!t.objectStoreNames.contains("ideas")){console.log("[IDB] 📋 Creating ideas object store");const d=t.createObjectStore("ideas",{keyPath:"id",autoIncrement:!0});d.createIndex("timestamp","timestamp",{unique:!1}),d.createIndex("text","text",{unique:!1}),console.log("[IDB] ✅ Ideas store created with indexes")}a.onUpgrade&&a.onUpgrade(t,o)}})}async function B(){return i||(i=await D()),i}async function u(r,s,a){return new Promise(async(n,c)=>{try{const o=(await B()).transaction([r],s),t=o.objectStore(r);o.onerror=()=>{console.error("[IDB] ❌ Transaction error:",o.error),c(o.error)},o.oncomplete=()=>{console.log(`[IDB] ✅ Transaction completed: ${r} (${s})`)};const d=await a(t,o);n(d)}catch(e){console.error("[IDB] ❌ Transaction failed:",e),c(e)}})}async function m(r){console.log("[IDB] ➕ Adding idea:",r);const s={text:r.trim(),timestamp:Date.now(),synced:!1};return u("ideas","readwrite",a=>new Promise((n,c)=>{const e=a.add(s);e.onsuccess=()=>{const o={...s,id:e.result};console.log("[IDB] ✅ Idea added with ID:",e.result),n(o)},e.onerror=()=>{console.error("[IDB] ❌ Failed to add idea:",e.error),c(e.error)}}))}async function f(r={}){console.log("[IDB] 📋 Getting all ideas");const{orderBy:s="timestamp",direction:a="desc",limit:n}=r;return u("ideas","readonly",c=>new Promise((e,o)=>{let t;s==="timestamp"?t=c.index("timestamp").openCursor(null,a==="desc"?"prev":"next"):t=c.openCursor();const d=[];t.onsuccess=I=>{const l=I.target.result;l&&(!n||d.length<n)?(d.push(l.value),l.continue()):(console.log(`[IDB] ✅ Retrieved ${d.length} ideas`),e(d))},t.onerror=()=>{console.error("[IDB] ❌ Failed to get ideas:",t.error),o(t.error)}}))}async function w(){return console.log("[IDB] 🧹 Clearing all ideas"),u("ideas","readwrite",r=>new Promise((s,a)=>{const n=r.clear();n.onsuccess=()=>{console.log("[IDB] ✅ All ideas cleared"),s(!0)},n.onerror=()=>{console.error("[IDB] ❌ Failed to clear ideas:",n.error),a(n.error)}}))}console.log("[IDB] 🗄️ IndexedDB helper module loaded");export{m as addIdea,w as clearIdeas,f as getAllIdeas,D as openDB};
